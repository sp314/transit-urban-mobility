theme_minimal()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
ggplot(aes(Xcoord,Ycoord)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon",h = c(20,20)) +
scale_fill_gradient2("Tree Intensity", low = "grey", mid = "yellow", high = "green") +
theme_minimal()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
ggplot(aes(Xcoord,Ycoord)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon",h = c(20,20)) +
scale_fill_viridis_c() +
theme_minimal()
treelong %>%
distinct(Grid,BC,XGrid,YGrid) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = factor(BC))) +
geom_tile() +
theme_void()
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times.RData")
theme_map <- theme_void()
travel_times <- travel_times %>%
mutate(origin_id = factor(origin_id),
dest_id = factor(dest_id))
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
library(tigris)
options(tigris_class="sf")
VA_tracts <- tracts(state = "VA") %>%
st_transform(crs = 102285)
MD_tracts <- tracts(state = "MD") %>%
st_transform(crs = 102285)
DC_tracts <- tracts(state = "DC") %>%
st_transform(crs = 102285)
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts)
DMV_tracts
plot(DMV_tracts)
plot(DMV_tracts, max.plot = 1)
plot(VA_tracts, MD_tracts, max.plot = 1)
plot(VA_tracts, MD_tracts, max.plot = 2)
plot(VA_tracts, max.plot = 1)
plot(MD_tracts, max.plot = 1)
plot(DMV_tracts, max.plot = 1)
setwd("~/Desktop/school/math494/transit_urban_mobility")
travel_time_census <- st_join(x = travel_time_sf, y = DMV_tracts, largest = TRUE)
DC_census <- st_read("data/washington_DC_censustracts.json") %>%
select("id" = MOVEMENT_ID, geometry) %>%
mutate(id = factor(id, levels = levels(travel_times$dest_id)))
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id")) %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_census <- st_join(x = travel_time_sf, y = DMV_tracts, largest = TRUE)
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts) %>%
st_filter(travel_time_sf)
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts) %>%
st_join(y = travel_time_sf, join = st_contains_properly)
DMV_tracts %>% head()
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts) %>%
st_join(y = travel_time_sf, join = st_contains)
DMV_tracts %>% head()
travel_time_census <- st_join(travel_time_sf, DMV_tracts, join = st_equals)
travel_time_census %>% head()
DMV_tracts
travel_time_census <- st_join(travel_time_sf, DMV_tracts, join = st_overlaps)
travel_time_census
travel_time_census %>% head() %>% View()
travel_time_census %>% head(20) %>% View()
travel_time_census <- st_join(travel_time_sf, DMV_tracts, join = st_equals)
travel_time_census %>% head(20) %>% View()
travel_time_census <- st_join(travel_time_sf, DMV_tracts, join = st_overlaps, largest = TRUE)
travel_time_census %>% head(20) %>% View()
metro_tracts <- function(metro_name) {
# First, identify which states intersect the metro area using the
# `states` function in tigris
st <- states(cb = TRUE)
cb <- core_based_statistical_areas(cb = TRUE)
metro <- filter(cb, grepl(metro_name, NAME))
stcodes <- st[metro,]$STATEFP
# Then, fetch the tracts, using rbind_tigris if there is more
# than one state
if (length(stcodes) > 1) {
tr <- rbind_tigris(
map(stcodes, function(x) {
tracts(x, cb = TRUE)
})
)
} else {
tr <- tracts(x, cb = TRUE)
}
# Now, find out which tracts are within the metro area
within <- st_within(tr, metro)
within_lgl <- map_lgl(within, function(x) {
if (length(x) == 1) {
return(TRUE)
} else {
return(FALSE)
}
})
# Finally, subset and return the output
output <- tr[within_lgl,]
return(output)
}
metro_tracts("DC")
DMV <- metro_tracts("DC")
DMV
DMV %>% View()
plot(DMV, max.plots = 1)
travel_time_sf %>% filter(year == 2017, month == 1, week == 3) %>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
theme_map +
scale_fill_viridis_c(direction = -1)
dc_demographics <- read_csv(file = "DC_demographic_data.csv")
dc_demographics
DMV_tracts
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts)
DMV_tracts
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times.RData")
theme_map <- theme_void()
travel_times <- travel_times %>%
mutate(origin_id = factor(origin_id),
dest_id = factor(dest_id))
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
DMV_tracts %>%
ggplot() +
geom_sf(mapping = aes(color = NAMELSAD))
DMV_tracts
DMV_tracts %>%
ggplot() +
geom_sf() +
theme_map
travel_time_sf
travel_time_census <- st_join(travel_time_sf, DMV_tracts, largest = TRUE)
travel_time_census %>% head(10) %>% View()
travel_time_sf %>% filter(year == 2017, month == 1, week == 4)%>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
geom_sf(data = dc_roads) +
theme_map +
scale_fill_viridis_c(direction = -1)
travel_time_census$TRACTCE
travel_time_census$NAMELSAD
travel_time_census$NAMELSAD %>% unique()
travel_time_census$NAMELSAD %>% unique() %>% length()
uber_tracts <- travel_time_census$NAMELSAD %>% unique()
DMV_tracts %>% filter(NAMELSAD %in% uber_tracts) %>%
ggplot() +
geom_sf()
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts) %>%
st_transform(crs = 102285)
uber_tracts <- travel_time_census$GEOID %>% unique()
DMV_tracts %>% filter(NAMELSAD %in% uber_tracts) %>%
ggplot() +
geom_sf()
DMV_tracts %>% filter(GEOID %in% uber_tracts) %>%
ggplot() +
geom_sf()
travel_time_census
travel_time_census_join <- travel_time_census
save(travel_time_census_join, file = "travel_time_census_join.RData")
uber_tracts <- travel_time_census$GEOID%>% unique()
uber_tracts <- DMV_tracts %>%
filter(GEOID %in% uber_tract_geoid)
uber_tract_geoid <- travel_time_census$GEOID%>% unique()
uber_tracts <- DMV_tracts %>%
filter(GEOID %in% uber_tract_geoid)
uber_tracts
# Filter the total state tracts to include only those from the uber set
joined_tract_geoid <- travel_time_census$GEOID%>% unique()
joined_tracts <- DMV_tracts %>%
filter(GEOID %in% joined_tract_geoid)
# Plot to make sure the joined tracts look like what we see in the uber data set
uber_tracts %>%
ggplot() +
geom_sf()
travel_times
travel_time_census_join
# # save joined dataset and the census tracts
save(uber_tracts, ascii = "census_dc_tracts.RData")
# # save joined dataset and the census tracts
save(uber_tracts, file = "census_dc_tracts.RData")
uber_tracts
travel_time_census
travel_time_census_join
travel_time_census_join %>% tail()
dim(travel_time_sf)
dim(travel_time_census_join)
st_geometry(travel_time_census_join)
st_geometry(travel_time_census_join) <- NULL
class(travel_time_census_join)
travel_time_census_join
travel_time_census_join <- travel_time_census_join %>%
select(dest_id, dest_name, year, month, week, mean_travel_time, lower_travel_time, upper_travel_time, GEOID)
travel_time_census_join <- travel_time_census_join %>%
select(dest_id, dest_name, year, month, week, mean_travel_time, lower_travel_time, upper_travel_time, GEOID, NAMELSAD)
library(tidyverse)
travel_time_census_join <- travel_time_census_join %>%
select(dest_id, dest_name, year, month, week, mean_travel_time, lower_travel_time, upper_travel_time, GEOID, NAMELSAD)
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
travel_time_census_join <- travel_time_census_join %>%
dplyr::select(dest_id, dest_name, year, month, week, mean_travel_time, lower_travel_time, upper_travel_time, GEOID, NAMELSAD)
travel_time_census_join
# # save joined dataset and the census tracts
save(travel_time_census_join, file = "travel_time_census_join.RData")
library(tidyverse)
library(dplyr)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times_census_join.RData")
library(tidyverse)
library(dplyr)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times_census_join.RData")
theme_map <- theme_void()
demographic_data <- read.csv("DC_demographic_data.csv", header = FALSE)
demographic_data <- read.csv("data/DC_demographic_data.csv", header = FALSE)
names <- unlist(demographic_data[2,])
demographic_data <- demographic_data %>%
slice(3:8096)
head(demographic_data)
demographic_data %>% View()
travel_times <- travel_times %>%
mutate(origin_id = factor(origin_id),
dest_id = factor(dest_id))
travel_time_census_join <- travel_time_census_join %>%
mutate(origin_id = factor(origin_id),
dest_id = factor(dest_id))
travel_time_census_join <- travel_time_census_join %>%
mutate(dest_id = factor(dest_id))
travel_time_census_join <- travel_time_census_join %>%
mutate(dest_id = factor(dest_id),
GEOID = factor(GEOID))
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
install.packages("tidycensus")
load("census_dc_tracts.RData")
load("data/census_dc_tracts.RData")
uber_tracts
save(uber_tracts, file = "dc_census_tracts.RData")
travel_time_census_join <- travel_time_census_join %>%
mutate(dest_id = factor(dest_id),
GEOID = factor(GEOID))
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
load("data/dc_census_tracts.RData")
dc_tracts <- uber_tracts
save(dc_tracts, file = "data/dc_tracts.RData")
load("data/dc_tracts.RData")
library(tidyverse)
library(tidycensus)
library(dplyr)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times_census_join.RData")
load("data/dc_tracts.RData")
theme_map <- theme_void()
# Could also directly import census demographic data using tidycensus
demographic_data <- read.csv("data/DC_demographic_data.csv", header = FALSE)
names <- unlist(demographic_data[2,])
demographic_data <- demographic_data %>%
slice(3:8096)
head(demographic_data)
colnames(demographic_data) <- names
head(demographic_data)
travel_time_census_join <- travel_time_census_join %>%
mutate(dest_id = factor(dest_id),
GEOID = factor(GEOID))
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
dc_tracts
travel_time_sf <- left_join(x = travel_time_census_join, y = dc_tracts, by = c("dest_id" = "id")) %>%
st_as_sf() %>%
st_transform(crs = 102285)
dc_tracts <- dc_tracts %>%
mutate(GEOID = factor(GEOID))
dc_tracts
travel_time_sf <- left_join(x = travel_time_census_join, y = dc_tracts, by = c("GEOID" = "GEOID")) %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_sf <- left_join(x = travel_time_census_join, y = dc_tracts, by = "GEOID") %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_sf
travel_time_sf %>% View()
dc_tracts
dc_tracts <- dc_tracts %>%
mutate(GEOID = factor(GEOID)) %>%
select(GEOID, geometry)
dc_tracts
save(dc_tracts, file = "data/dc_tracts.RData")
load("data/travel_times_census_join.RData")
load("data/dc_tracts.RData")
travel_times_census_join <- travel_time_census_join
save(travel_times_census_join, file = "data/travel_times_census_join.RData")
load("data/travel_times_census_join.RData")
load("data/travel_times_census_join.RData")
load("data/dc_tracts.RData")
theme_map <- theme_void()
# Could also directly import census demographic data using tidycensus
demographic_data <- read.csv("data/DC_demographic_data.csv", header = FALSE)
names <- unlist(demographic_data[2,])
demographic_data <- demographic_data %>%
slice(3:8096)
head(demographic_data)
colnames(demographic_data) <- names
head(demographic_data)
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
travel_time_sf <- left_join(x = travel_time_census_join, y = dc_tracts, by = "GEOID") %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_sf <- left_join(x = travel_times_census_join, y = dc_tracts, by = "GEOID") %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_sf
library(acs)
install.packages("acs")
library(acs)
library(tidycensus)
census_api_key("c1158c3b735c3708ba05dd80bf17f753fb52a247")
census_api_key("c1158c3b735c3708ba05dd80bf17f753fb52a247", install = TRUE)
get_acs(geography = "tract", variables = "B19013_001", state = "DC")
demographic_data %>% View()
dc_tracts_income <- get_acs(geography = "tract", variables = "B19013_001", state = "DC")
dc_tracts_income <- rbind(get_acs(geography = "tract", variables = "B19013_001", state = "DC"),
get_acs(geography = "tract", variables = "B19013_001", state = "VA"),
get_acs(geography = "tract", variables = "B19013_001", state = "MD"))
dc_tracts_income %>% dim()
dc_tracts_income
dc_tracts_income <- rbind(get_acs(geography = "tract", variables = "B19013_001", state = "DC", output = "wide"),
get_acs(geography = "tract", variables = "B19013_001", state = "VA", output = "wide"),
get_acs(geography = "tract", variables = "B19013_001", state = "MD", output = "wide"))
dc_tracts_income
dc_tracts_income <- rbind(get_acs(geography = "tract", variables = c(medincome = "B19013_001"), state = "DC", output = "wide"),
get_acs(geography = "tract", variables = c(medincome = "B19013_001"), state = "VA", output = "wide"),
get_acs(geography = "tract", variables = c(medincome = "B19013_001"), state = "MD", output = "wide"))
dc_tracts_income
library(tidyverse)
library(tidycensus)
library(sf)
census_api_key("c1158c3b735c3708ba05dd80bf17f753fb52a247", install = TRUE)
load("data/dc_tracts.RData")
dc_tracts
dc_tracts_income <- rbind(get_acs(geography = "tract", variables = c(medincome = "B19013_001"), state = "DC", output = "wide"),
get_acs(geography = "tract", variables = c(medincome = "B19013_001"), state = "VA", output = "wide"),
get_acs(geography = "tract", variables = c(medincome = "B19013_001"), state = "MD", output = "wide"))
load("data/dc_tracts.RData")
dc_tracts
dc_tracts_income
v17 <- load_variables(2017, "acs5", cache = TRUE)
View(v17)
acs_vars <- c(med_income = "B19013_001",
med_age = "B01002_001",
white = "B02001_002",
asian = "B02001_005",
black = "B02001_003",
car_transit = "B08301_002",
public_transit = "B08301_010")
# Create dataframe of acs variables of interest from each tract in the 3 states
dc_tracts_income <- rbind(get_acs(geography = "tract", variables = acs_vars, state = "DC", output = "wide"),
get_acs(geography = "tract", variables = acs_vars, state = "VA", output = "wide"),
get_acs(geography = "tract", variables = acs_vars, state = "MD", output = "wide"))
dc_tracts_income
dc_tracts
# Create dataframe of acs variables of interest from each tract in the 3 states
dc_acs <- rbind(get_acs(geography = "tract", variables = acs_vars, state = "DC", output = "wide"),
get_acs(geography = "tract", variables = acs_vars, state = "VA", output = "wide"),
get_acs(geography = "tract", variables = acs_vars, state = "MD", output = "wide"))
# Join acs data on the census tracts of interest (those in the Uber movement dataset)
dc_acs_tracts <- left_join(x = dc_tracts, y = dc_acs, by = "GEOID")
dc_acs_tracts
# Save joined acs data by tract
save(dc_acs_tracts, file = "data/dc_acs_tracts")
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times_census_join.RData")
load("data/dc_acs_tracts.RData")
load("data/dc_acs_tracts.RData")
# # Save joined acs data by tract
save(dc_acs_tracts, file = "data/dc_acs_tracts.RData")
load("data/travel_times_census_join.RData")
load("data/dc_acs_tracts.RData")
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times_census_join.RData")
load("data/dc_acs_tracts.RData")
theme_map <- theme_void()
# Could also directly import census demographic data using tidycensus package
demographic_data <- read.csv("data/DC_demographic_data.csv", header = FALSE)
names <- unlist(demographic_data[2,])
demographic_data <- demographic_data %>%
slice(3:8096)
head(demographic_data)
colnames(demographic_data) <- names
head(demographic_data)
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
travel_time_sf <- left_join(x = travel_times_census_join, y = dc_acs_tracts, by = "GEOID") %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_sf
travel_time_sf %>% filter(year == 2017, month == 1, week == 3) %>%
ggplot() +
geom_sf(mapping = aes(fill = car_transitE)) +
theme_map +
scale_fill_viridis_c(direction = -1)
travel_time_sf %>% filter(year == 2017, month == 1, week == 3) %>%
ggplot() +
geom_sf(mapping = aes(fill = med_incomeE)) +
theme_map +
scale_fill_viridis_c(direction = -1)
travel_time_sf %>% filter(year == 2017, month == 1, week == 3) %>%
ggplot() +
geom_sf(mapping = aes(fill = med_incomeE)) +
theme_map +
scale_fill_viridis_c()
library(tidyverse)
library(tidycensus)
library(sf)
# Set up census api
census_api_key("c1158c3b735c3708ba05dd80bf17f753fb52a247", install = TRUE)
# Import census tracts of interest (those in the Uber movement dataset)
load("data/dc_tracts.RData")
# Look at and choose what acs variables we want to include
v17 <- load_variables(2017, "acs5", cache = TRUE)
v17 %>% View()
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times_census_join.RData")
load("data/dc_acs_tracts.RData")
theme_map <- theme_void()
# Could also directly import census demographic data using tidycensus package
demographic_data <- read.csv("data/DC_demographic_data.csv", header = FALSE)
names <- unlist(demographic_data[2,])
demographic_data <- demographic_data %>%
slice(3:8096)
head(demographic_data)
colnames(demographic_data) <- names
head(demographic_data)
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
travel_time_sf <- left_join(x = travel_times_census_join, y = dc_acs_tracts, by = "GEOID") %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_sf %>% View()
travel_time_sf %>% filter(year == 2017, month == 1, week == 4)%>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
geom_sf(data = dc_roads) +
theme_map +
scale_fill_viridis_c(direction = -1)
dc_roads %>% View()
