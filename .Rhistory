politics <- dat %>%
group_by(state) %>%
summarise(total_spending = sum(total.receipts),
log_total_spending = log(total_spending)) %>%
filter(state %in% state_map$state) %>%
left_join(state_map) %>% mutate(state.name = tolower(state.name))
View(politics)
states_spending <- st_as_sf(map("state", plot = FALSE, fill = TRUE)) %>%
rename('state.name' = ID) %>%
left_join(politics)
mapdeck(data = states_spending, style = mapdeck_style("light")) %>%
add_polygon(fill_colour = 'total_spending',
fill_opacity = 200,
legend = TRUE,
palette = "viridis",
legend_options = list(fill_colour = list(title = "Eelection Spending")))
mapdeck(data = states_spending, style = mapdeck_style("light")) %>%
add_polygon(fill_colour = 'total_spending',
fill_opacity = 200,
legend = TRUE,
palette = "viridis",
legend_options = list(fill_colour = list(title = "Eelection Spending")))
mapdeck(data = states_spending, style = mapdeck_style("light")) %>%
add_polygon(fill_colour = 'total_spending',
fill_opacity = 200,
legend = TRUE,
palette = "viridis",
legend_options = list(fill_colour = list(title = "Election Spending")))
mapdeck(data = states_spending, style = mapdeck_style("light")) %>%
add_polygon(fill_colour = 'log_total_spending',
fill_opacity = 200,
legend = TRUE,
palette = "viridis",
legend_options = list(fill_colour = list(title = "Election Spending")))
mapdeck(data = states_spending, style = mapdeck_style("light")) %>%
add_polygon(fill_colour = 'log_total_spending',
fill_opacity = 200,
legend = TRUE,
palette = "viridis",
legend_options = list(fill_colour = list(title = "Election Spending")))
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
library(tidyverse)
library(tidyverse)
library(lubridate)
load('tree.RData')
trees
treelong
treelong %>% colnames()
treelong %>% View()
treelong %>%
filter(Year == 1995) %>%
ggplot(aes(x = Xcoord, y = Ycoord), alpha = 0.5) +
geom_point() +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
ggplot(aes(x = Xcoord, y = Ycoord), alpha = 0.2) +
geom_point() +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
ggplot(aes(x = Xcoord, y = Ycoord), alpha = 0.1) +
geom_point() +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
ggplot(aes(x = Xcoord, y = Ycoord) +
geom_point(alpha = 0.1)) +
theme_minimal()
geom_point(alpha = 0.1) +
theme_minimal()
ggplot(aes(x = Xcoord, y = Ycoord)_ +
treelong %>%
filter(Year == 1995) %>%
ggplot(aes(x = Xcoord, y = Ycoord)) +
geom_point(alpha = 0.1) +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
ggplot(aes(x = Xcoord, y = Ycoord)) +
geom_point(alpha = 0.3) +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
ggplot(aes(x = Xcoord, y = Ycoord)) +
geom_point(alpha = 0.5) +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
filter(!is.na(Status)) %>%
ggplot(aes(x = Xcoord, y = Ycoord, color = Status)) +
geom_point() +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
filter(!is.na(Status)) %>%
ggplot(aes(x = Xcoord, y = Ycoord, color = Status)) +
geom_point(alpha = 0.5) +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
filter(!is.na(Status), Status == "D") %>%
ggplot(aes(x = Xcoord, y = Ycoord, color = Status)) +
geom_point(alpha = 0.5) +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
filter(!is.na(Status), Status == "L") %>%
ggplot(aes(x = Xcoord, y = Ycoord, color = Status)) +
geom_point(alpha = 0.5) +
theme_minimal()
treelong %>%
filter(Year == 1995) %>%
filter(!is.na(Status), Status == "D") %>%
ggplot(aes(x = Xcoord, y = Ycoord, color = Status)) +
geom_point(alpha = 0.5) +
theme_minimal()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
count(FID)
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
count(Grid)
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile() %>%
scale_fill_viridis_c()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile() +
scale_fill_viridis_c()
treelong %>%
filter(Year == 1996 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile() +
scale_fill_viridis_c()
treelong %>%
filter(Year == 1996 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile() +
scale_fill_viridis_c()
treelong %>%
filter(Year == 2001 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile() +
scale_fill_viridis_c()
treelong %>%
filter(Year == 2006 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile() +
scale_fill_viridis_c()
treelong %>%
filter(Year == 2011 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile() +
scale_fill_viridis_c()
treelong %>%
filter(Year == 2016 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile() +
scale_fill_viridis_c()
treecompare <- left_join(treecompare %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid), treecompare %>% filter(Year == 2017 & Status == 'L') %>%
count(Grid)) %>%
left_join(select(treelong,XGrid,YGrid,Grid))
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(Grid)) %>%
left_join(select(treelong,XGrid,YGrid,Grid))
treecompare
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(n_1996 = Grid), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(n_2017 = Grid)) %>%
left_join(select(treelong,XGrid,YGrid,Grid))
treecompare
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(n_1996 = Grid), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(n_2017 = Grid))
treecompare
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(n_1996 = Grid), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(n_2017 = Grid)) %>%
left_join(select(treelong,XGrid,YGrid,Grid))
treelong %>%
filter(Year == 1996 & Status == 'L') %>%
count(Grid)
treelong %>%
filter(Year == 1996 & Status == 'L') %>%
count(Grid)
treelong %>%
filter(Year == 1996 & Status == 'L') %>%
count(Grid) %>% View(
)
treelong %>%
filter(Year == 2001 & Status == 'L') %>%
count(Grid)
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid, name = "n_1996"), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(Grid, name = "n_2017")) %>%
left_join(select(treelong, XGrid,YGrid,Grid))
treecompare
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid, name = "n_1996"), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(Grid, name = "n_2017")) %>%
left_join(select(treelong, XGrid,YGrid,Grid)) %>%
replace_na(data = list("n_1996" = 0, "n_2017" = 0))
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid, name = "n_1996"), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(Grid, name = "n_2017")) %>%
left_join(select(treelong, XGrid,YGrid,Grid)) %>%
replace_na(data = list(n_1996 = 0, n_2017 = 0))
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid, name = "n_1996"), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(Grid, name = "n_2017")) %>%
left_join(select(treelong, XGrid,YGrid,Grid)) %>%
replace_na(list(n_1996 = 0, n_2017 = 0))
treecompare
treecompare <- left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid, name = "n_1996"), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(Grid, name = "n_2017")) %>%
left_join(select(treelong, XGrid,YGrid,Grid)) %>%
replace_na(list(n_1996 = 0, n_2017 = 0)) %>%
mutate(delta_n = n_2017 - n_1996) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = delta_n)) +
geom_tile() +
scale_fill_viridis_c()
left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid, name = "n_1996"), treelong %>% filter(Year == 2017 & Status == 'L') %>%
count(Grid, name = "n_2017")) %>%
left_join(select(treelong, XGrid,YGrid,Grid)) %>%
replace_na(list(n_1996 = 0, n_2017 = 0)) %>%
mutate(delta_n = n_2017 - n_1996) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = delta_n)) +
geom_tile() +
scale_fill_viridis_c()
left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid, name = "n_1996"), treelong %>% filter(Year == 2005 & Status == 'L') %>%
count(Grid, name = "n_2017")) %>%
left_join(select(treelong, XGrid,YGrid,Grid)) %>%
replace_na(list(n_1996 = 0, n_2017 = 0)) %>%
mutate(delta_n = n_2017 - n_1996) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = delta_n)) +
geom_tile() +
scale_fill_viridis_c()
left_join(treelong %>% filter(Year == 1996 & Status == 'L') %>%
count(Grid, name = "n_1996"), treelong %>% filter(Year == 2000 & Status == 'L') %>%
count(Grid, name = "n_2017")) %>%
left_join(select(treelong, XGrid,YGrid,Grid)) %>%
replace_na(list(n_1996 = 0, n_2017 = 0)) %>%
mutate(delta_n = n_2017 - n_1996) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = delta_n)) +
geom_tile() +
scale_fill_viridis_c()
treelong %>%
filter(Year == 1995) %>%
filter(!is.na(Status)) %>%
ggplot(aes(x = Xcoord, y = Ycoord, color = Status)) +
geom_point() +
theme_minimal()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
count(Grid) %>%
left_join(select(treelong,XGrid,YGrid,Grid)) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = n)) +
geom_tile()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
ggplot(aes(Xcoord,Ycoord)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon",h = c(20,20)) +
scale_fill_gradient2("Tree Intensity", low = "grey", mid = "yellow", high = "green") +
theme_minimal()
treelong %>%
filter(Year == 1995 & Status == 'L') %>%
ggplot(aes(Xcoord,Ycoord)) +
stat_density_2d(aes(fill = ..level..), geom = "polygon",h = c(20,20)) +
scale_fill_viridis_c() +
theme_minimal()
treelong %>%
distinct(Grid,BC,XGrid,YGrid) %>%
ggplot(aes(x = XGrid, y = YGrid, fill = factor(BC))) +
geom_tile() +
theme_void()
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times.RData")
theme_map <- theme_void()
travel_times <- travel_times %>%
mutate(origin_id = factor(origin_id),
dest_id = factor(dest_id))
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
library(tigris)
options(tigris_class="sf")
VA_tracts <- tracts(state = "VA") %>%
st_transform(crs = 102285)
MD_tracts <- tracts(state = "MD") %>%
st_transform(crs = 102285)
DC_tracts <- tracts(state = "DC") %>%
st_transform(crs = 102285)
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts)
DMV_tracts
plot(DMV_tracts)
plot(DMV_tracts, max.plot = 1)
plot(VA_tracts, MD_tracts, max.plot = 1)
plot(VA_tracts, MD_tracts, max.plot = 2)
plot(VA_tracts, max.plot = 1)
plot(MD_tracts, max.plot = 1)
plot(DMV_tracts, max.plot = 1)
setwd("~/Desktop/school/math494/transit_urban_mobility")
travel_time_census <- st_join(x = travel_time_sf, y = DMV_tracts, largest = TRUE)
DC_census <- st_read("data/washington_DC_censustracts.json") %>%
select("id" = MOVEMENT_ID, geometry) %>%
mutate(id = factor(id, levels = levels(travel_times$dest_id)))
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id")) %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_census <- st_join(x = travel_time_sf, y = DMV_tracts, largest = TRUE)
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts) %>%
st_filter(travel_time_sf)
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts) %>%
st_join(y = travel_time_sf, join = st_contains_properly)
DMV_tracts %>% head()
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts) %>%
st_join(y = travel_time_sf, join = st_contains)
DMV_tracts %>% head()
travel_time_census <- st_join(travel_time_sf, DMV_tracts, join = st_equals)
travel_time_census %>% head()
DMV_tracts
travel_time_census <- st_join(travel_time_sf, DMV_tracts, join = st_overlaps)
travel_time_census
travel_time_census %>% head() %>% View()
travel_time_census %>% head(20) %>% View()
travel_time_census <- st_join(travel_time_sf, DMV_tracts, join = st_equals)
travel_time_census %>% head(20) %>% View()
travel_time_census <- st_join(travel_time_sf, DMV_tracts, join = st_overlaps, largest = TRUE)
travel_time_census %>% head(20) %>% View()
metro_tracts <- function(metro_name) {
# First, identify which states intersect the metro area using the
# `states` function in tigris
st <- states(cb = TRUE)
cb <- core_based_statistical_areas(cb = TRUE)
metro <- filter(cb, grepl(metro_name, NAME))
stcodes <- st[metro,]$STATEFP
# Then, fetch the tracts, using rbind_tigris if there is more
# than one state
if (length(stcodes) > 1) {
tr <- rbind_tigris(
map(stcodes, function(x) {
tracts(x, cb = TRUE)
})
)
} else {
tr <- tracts(x, cb = TRUE)
}
# Now, find out which tracts are within the metro area
within <- st_within(tr, metro)
within_lgl <- map_lgl(within, function(x) {
if (length(x) == 1) {
return(TRUE)
} else {
return(FALSE)
}
})
# Finally, subset and return the output
output <- tr[within_lgl,]
return(output)
}
metro_tracts("DC")
DMV <- metro_tracts("DC")
DMV
DMV %>% View()
plot(DMV, max.plots = 1)
travel_time_sf %>% filter(year == 2017, month == 1, week == 3) %>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
theme_map +
scale_fill_viridis_c(direction = -1)
dc_demographics <- read_csv(file = "DC_demographic_data.csv")
dc_demographics
DMV_tracts
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts)
DMV_tracts
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
#tigris package - contains roads for DC
options(tigris_class="sf")
load("data/travel_times.RData")
theme_map <- theme_void()
travel_times <- travel_times %>%
mutate(origin_id = factor(origin_id),
dest_id = factor(dest_id))
#primary_secondary_roads includes interstates and other highways in DC
dc_roads <- primary_secondary_roads(state="DC") %>%
st_transform(crs = 102285)
DMV_tracts %>%
ggplot() +
geom_sf(mapping = aes(color = NAMELSAD))
DMV_tracts
DMV_tracts %>%
ggplot() +
geom_sf() +
theme_map
travel_time_sf
travel_time_census <- st_join(travel_time_sf, DMV_tracts, largest = TRUE)
travel_time_census %>% head(10) %>% View()
travel_time_sf %>% filter(year == 2017, month == 1, week == 4)%>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
geom_sf(data = dc_roads) +
theme_map +
scale_fill_viridis_c(direction = -1)
travel_time_census$TRACTCE
travel_time_census$NAMELSAD
travel_time_census$NAMELSAD %>% unique()
travel_time_census$NAMELSAD %>% unique() %>% length()
uber_tracts <- travel_time_census$NAMELSAD %>% unique()
DMV_tracts %>% filter(NAMELSAD %in% uber_tracts) %>%
ggplot() +
geom_sf()
DMV_tracts <- rbind(VA_tracts, MD_tracts, DC_tracts) %>%
st_transform(crs = 102285)
uber_tracts <- travel_time_census$GEOID %>% unique()
DMV_tracts %>% filter(NAMELSAD %in% uber_tracts) %>%
ggplot() +
geom_sf()
DMV_tracts %>% filter(GEOID %in% uber_tracts) %>%
ggplot() +
geom_sf()
travel_time_census
travel_time_census_join <- travel_time_census
save(travel_time_census_join, file = "travel_time_census_join.RData")
uber_tracts <- travel_time_census$GEOID%>% unique()
uber_tracts <- DMV_tracts %>%
filter(GEOID %in% uber_tract_geoid)
uber_tract_geoid <- travel_time_census$GEOID%>% unique()
uber_tracts <- DMV_tracts %>%
filter(GEOID %in% uber_tract_geoid)
uber_tracts
# Filter the total state tracts to include only those from the uber set
joined_tract_geoid <- travel_time_census$GEOID%>% unique()
joined_tracts <- DMV_tracts %>%
filter(GEOID %in% joined_tract_geoid)
# Plot to make sure the joined tracts look like what we see in the uber data set
uber_tracts %>%
ggplot() +
geom_sf()
travel_times
travel_time_census_join
# # save joined dataset and the census tracts
save(uber_tracts, ascii = "census_dc_tracts.RData")
# # save joined dataset and the census tracts
save(uber_tracts, file = "census_dc_tracts.RData")
uber_tracts
travel_time_census
travel_time_census_join
travel_time_census_join %>% tail()
dim(travel_time_sf)
dim(travel_time_census_join)
st_geometry(travel_time_census_join)
st_geometry(travel_time_census_join) <- NULL
class(travel_time_census_join)
travel_time_census_join
travel_time_census_join <- travel_time_census_join %>%
select(dest_id, dest_name, year, month, week, mean_travel_time, lower_travel_time, upper_travel_time, GEOID)
travel_time_census_join <- travel_time_census_join %>%
select(dest_id, dest_name, year, month, week, mean_travel_time, lower_travel_time, upper_travel_time, GEOID, NAMELSAD)
library(tidyverse)
travel_time_census_join <- travel_time_census_join %>%
select(dest_id, dest_name, year, month, week, mean_travel_time, lower_travel_time, upper_travel_time, GEOID, NAMELSAD)
library(tidyverse)
library(sf)
library(rgdal)
library(tigris)
library(spdep)
travel_time_census_join <- travel_time_census_join %>%
dplyr::select(dest_id, dest_name, year, month, week, mean_travel_time, lower_travel_time, upper_travel_time, GEOID, NAMELSAD)
travel_time_census_join
# # save joined dataset and the census tracts
save(travel_time_census_join, file = "travel_time_census_join.RData")
