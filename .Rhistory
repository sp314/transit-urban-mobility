install.packages("spatstat")
treesub <- treelong %>%
filter(Year == 2018 & Status == 'L')
load('tree.RData')
treesub <- treelong %>%
filter(Year == 2018 & Status == 'L')
treeppp <- ppp(treesub$Xcoord-20,treesub$Ycoord,c(0,400),c(0,400)) #ppp stands for planar point pattern
library(spatstat)
treeppp <- ppp(treesub$Xcoord-20,treesub$Ycoord,c(0,400),c(0,400)) #ppp stands for planar point pattern
plot(treeppp) #For spatial intensity estimation, we need to specify the region of interest, which is why we need a ppp object going forward.
treeppp
treesub
treesub %>% View()
plot(treeppp)
plot(quadratcount(treeppp, nx = 5, ny = 5),add=TRUE)
plot(treeppp)
plot(quadratcount(treeppp, nx = 5, ny = 5),add=TRUE)
plot(treeppp)
plot(quadratcount(treeppp, nx = 10, ny = 10),add=TRUE)
plot(treeppp)
plot(quadratcount(treeppp, nx = 10, ny = 10),add=TRUE)
plot(treeppp)
plot(quadratcount(treeppp, nx = 10, ny = 10),add=TRUE)
plot(intensity(quadratcount(treeppp, nx = 10, ny = 10), image = TRUE))
plot(treeppp)
plot(quadratcount(treeppp, nx = 12, ny = 12),add=TRUE)
plot(treeppp)
plot(quadratcount(treeppp, nx = 10, ny = 10),add=TRUE)
plot(intensity(quadratcount(treeppp, nx = 10, ny = 10), image = TRUE))
plot(treeppp)
plot(quadratcount(treeppp, nx = 10, ny = 10),add=TRUE)
plot(intensity(quadratcount(treeppp, nx = 10, ny = 10), image = TRUE))
treeppp
treeppp$n
total_count <- treeppp$n
exp_count.H_0 <- total_count/(100)
#expected counts
treeppp$n
total_count/(100)
total_count <- treeppp$n #3236 total counts
total_count/(100) #100 individual tiles with uniform intensity
quadrat.test(treeppp, nx = 10, ny = 10)
plot(quadrat.test(treeppp, nx = 10, ny = 10))
quadrat.test(treeppp, nx = 10, ny = 10)
# ?density.ppp to see documentation
plot(density.ppp(treeppp), sigma = 0.1)
?density.ppp
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, sigma = 0.1, kernel = "gaussian"))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian"))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian"), sigma = 0.1)
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 0.1))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 1))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10))
plot(treeppp, add=TRUE)
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 2))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10))
knitr::opts_chunk$set(echo = TRUE, error=TRUE)
library(stringr)
library(lubridate)
library(dplyr)
library(ggplot2)
# ?density.ppp to see documentation
plot(density.ppp(treeppp,sigma = 0.1, kernel = "gaussian"))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 1))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 0.1))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 100))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 12)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 15)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 8)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 5)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 20)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 25)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 5)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(treeppp, add=TRUE)
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 15)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 15)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(treeppp, add=TRUE)
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 1)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(treeppp, add=TRUE)
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 1)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 1)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(treeppp, add=TRUE)
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(treeppp, add=TRUE)
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 20))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "epanechnikov", sigma = 10))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "epanechnikov", sigma = 10))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(density.ppp(x = treeppp, kernel = "epanechnikov", sigma = 10))
plot(treeppp, add=TRUE)
plot(density.ppp(treeppp,sigma = 0.2))
plot(treeppp, add=TRUE)
plot(density.ppp(treeppp,sigma = 20))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 20, diggle = TRUE))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 20, diggle = TRUE))
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10, diggle = TRUE))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10, diggle = TRUE))
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 1, diggle = TRUE))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 1, diggle = TRUE))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 1, diggle = TRUE))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10, diggle = TRUE))
plot(treeppp, add=TRUE)
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10, diggle = TRUE))
plot(treeppp, add=TRUE)
# ?density.ppp to see documentation
plot(density.ppp(x = treeppp, kernel = "gaussian", sigma = 10)) # increase the magnitude since the units of coordinate system is larger than the last dataset I worked with...
plot(treeppp, add=TRUE)
treelong$Species %>% unique()
treesub <- treelong %>%
filter(Year == 2018 & Status == 'L' & Species == 'QA')
QAtreeppp <- ppp(treesub$Xcoord-20,treesub$Ycoord,c(0,400),c(0,400))
plot(density(QAtreeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian'))
plot(Xtreeppp, add=TRUE)
plot(density(QAtreeppp, sigma = 10, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 5, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 10, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 5, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 20, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 10, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 10, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 10, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 10, diggle = TRUE, kernel= 'gaussian'))
plot(density(QAtreeppp, sigma = 10, kernel= 'gaussian'))
plot(QAtreeppp, add=TRUE)
plot(density(QAtreeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian'))
plot(QAtreeppp, add=TRUE)
plot(density(QAtreeppp, sigma = 10, diggle = TRUE, kernel= 'gaussian'))
plot(QAtreeppp, add=TRUE)
plot(density(QAtreeppp, sigma = 10, kernel= 'gaussian'))
plot(QAtreeppp, add=TRUE)
plot(density(QAtreeppp, sigma = 15, kernel= 'gaussian'))
plot(QAtreeppp, add=TRUE)
plot(density(QAtreeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian'))
plot(QAtreeppp, add=TRUE)
plot(density(QAtreeppp, sigma = 10, kernel= 'gaussian'))
plot(QAtreeppp, add=TRUE)
rh <- ppm(treeppp ~  x*y)
pred <- predict(rh)
ker <- density(treeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("rhohat prediction", "kernel smoothing"))
rh <- ppm(treeppp ~ x + y + x*y)
rh <- ppm(treeppp ~ x + y + x*y)
pred <- predict(rh)
ker <- density(treeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("rhohat prediction", "kernel smoothing"))
rh <- ppm(treeppp ~ x*y)
pred <- predict(rh)
ker <- density(treeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("rhohat prediction", "kernel smoothing"))
treeppp$x
rh <- ppm(treeppp ~ x*y)
rh <- ppm(treeppp ~ x*y)
pred <- predict(rh)
ker <- density(treeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("rhohat prediction", "kernel smoothing"))
treesub <- treelong %>%
filter(Year == 2018 & Status == 'L' & Species == 'QA')
QAtreeppp <- ppp(treesub$Xcoord-20,treesub$Ycoord,c(0,400),c(0,400))
treesub <- treelong %>%
filter(Year == 2018 & Status == 'L' & Species == 'B')
Btreeppp <- ppp(treesub$Xcoord-20,treesub$Ycoord,c(0,400),c(0,400))
BC <- treelong %>%
select(Grid, BC) %>%
group_by(Grid) %>%
slice(1) %>%
ungroup() %>%
left_join(data.frame(Grid = 1:1600),.) %>%
select(BC) %>%
pull() %>%
matrix(.,nrow=40,ncol=40) %>%
im(xrange = c(0,400),yrange = c(0,400))
plot(BC); plot(BCtreeppp)
treesub <- treelong %>%
filter(Year == 2018 & Status == 'L' & Species == 'BC')
BCtreeppp <- ppp(treesub$Xcoord-20,treesub$Ycoord,c(0,400),c(0,400))
plot(density(BCtreeppp, sigma = 15, kernel= 'gaussian'))
plot(BCtreeppp, add=TRUE)
plot(density(BCtreeppp, sigma = 15, diggle = TRUE, kernel= 'gaussian'))
plot(BCtreeppp, add=TRUE)
plot(density(BCtreeppp, sigma = 10, kernel= 'gaussian'))
plot(BCtreeppp, add=TRUE)
treesub <- treelong %>%
filter(Year == 2018 & Status == 'L' & Species == 'QA')
QAtreeppp <- ppp(treesub$Xcoord-20,treesub$Ycoord,c(0,400),c(0,400))
treesub <- treelong %>%
filter(Year == 2018 & Status == 'L' & Species == 'B')
Btreeppp <- ppp(treesub$Xcoord-20,treesub$Ycoord,c(0,400),c(0,400))
BC <- treelong %>%
select(Grid, BC) %>%
group_by(Grid) %>%
slice(1) %>%
ungroup() %>%
left_join(data.frame(Grid = 1:1600),.) %>%
select(BC) %>%
pull() %>%
matrix(.,nrow=40,ncol=40) %>%
im(xrange = c(0,400),yrange = c(0,400))
plot(BC); plot(BCtreeppp)
rh <- ppm(BCtreeppp~factor(BC))
summary(rh)
pred <- predict(rh)
plot(pred)
ker <- density(BCtreeppp)
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("model prediction from burn area", "kernel density estimation"))
plot(BC); plot(QAtreeppp)
rh <- ppm(QAtreeppp~factor(BC))
summary(rh)
pred <- predict(rh)
plot(pred)
ker <- density(QAtreeppp)
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("model prediction from burn area", "kernel density estimation"))
plot(BC); plot(Btreeppp)
rh <- ppm(Btreeppp~factor(BC))
summary(rh)
pred <- predict(rh)
plot(pred)
ker <- density(Btreeppp)
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("model prediction from burn area", "kernel density estimation"))
ker <- density(QAtreeppp)
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("QA model prediction from burn area", "kernel density estimation"))
ker <- density(QAtreeppp, sigma = 15, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("QA model prediction from burn area", "kernel density estimation"))
ker <- density(QAtreeppp, sigma = 10, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("QA model prediction from burn area", "kernel density estimation"))
ker <- density(Btreeppp, sigma = 10, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("BC model prediction from burn area", "kernel density estimation"))
ker <- density(BCtreeppp, sigma = 10, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("BC model prediction from burn area", "kernel density estimation"))
ker <- density(QAtreeppp, sigma = 10, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("QA model prediction from burn area", "kernel density estimation"))
ker <- density(Btreeppp, sigma = 10, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("Total model prediction from burn area", "kernel density estimation"))
ker <- density(QAtreeppp, sigma = 10, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("QA model prediction from burn area", "kernel density estimation"))
ker <- density(Btreeppp, sigma = 20, kernel= 'gaussian')
ker <- density(Btreeppp, sigma = 20, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("Total model prediction from burn area", "kernel density estimation"))
ker <- density(QAtreeppp, sigma = 20, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("QA model prediction from burn area", "kernel density estimation"))
ker <- density(QAtreeppp, sigma = 10, kernel= 'gaussian')
l <- solist(pred, ker)
plot(l, equal.ribbon = TRUE, main = "",
main.panel = c("QA model prediction from burn area", "kernel density estimation"))
plot(BCtreeppp)
plot(Btreeppp)
plot(QAtreeppp)
mean(nndist(BCtreeppp))
P <- BCtreeppp
marks(P) <- nndist(P)
plot(P, markscale=0.5) #size of circle represents distance to nearest neighbor
mean(nndist(Btreeppp))
P <- Btreeppp
marks(P) <- nndist(P)
plot(P, markscale=0.5) #size of circle represents distance to nearest neighbor
mean(nndist(QAtreeppp))
P <- QAtreeppp
marks(P) <- nndist(P)
plot(P, markscale=0.5) #size of circle represents distance to nearest neighbor
plot(Gest(BCtreeppp)) #CDF for nearest neighbor distance
plot(Gest(QAtreeppp)) #CDF for nearest neighbor distance
plot(Gest(Btreeppp)) #CDF for nearest neighbor distance
setwd("~/Desktop/school/math494/transit_urban_mobility")
travel_times <- load("data/travel_times.RData")
travel_times
travel_times <- load("data/travel_times.RData")
travel_times
load("~/Desktop/school/math494/transit_urban_mobility/data/travel_times.RData")
setwd("~/Desktop/school/math494/transit_urban_mobility/data")
travel_times
travel_times %>% View()
library(tidyverse)
library(tidyverse)
library(sf)
travel_times %>% View()
travel_times <- load("data/travel_times.RData")
travel_times
setwd("~/Desktop/school/math494")
setwd("~/Desktop/school/math494/transit_urban_mobility")
travel_times <- load("data/travel_times.RData")
travel_times
load("~/Desktop/school/math494/transit_urban_mobility/data/travel_times.RData")
load("data/travel_times.RData")
travel_times
load("data/travel_times.RData")
library(tidyverse)
library(sf)
load("data/travel_times.RData")
DC_census <- st_read("data/washington_DC_censustracts.json")
DC_census
DC_census %>%
ggplot() +
geom_sf()
map_theme <- theme_void()
library(tidyverse)
library(sf)
load("data/travel_times.RData")
theme_map <- theme_void()
DC_census %>%
ggplot() +
geom_sf() +
theme_map()
DC_census %>%
ggplot() +
geom_sf() +
theme_map()
theme_map <- theme_void()
DC_census %>%
ggplot() +
geom_sf() +
theme_map()
DC_census %>%
ggplot() +
geom_sf() +
theme_map
st_join(x = travel_times, y = DC_census, join = c(origin_id, MOVEMENT_ID))
DC_census <- st_read("data/washington_DC_censustracts.json") %>%
select("id" = MOVEMENT_ID, geometry)
DC_census
left_join(x = travel_times, y = DC_census, by = c(dest_id, id))
left_join(x = travel_times, y = DC_census, by = c(dst_id, id))
left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id"))
DC_census %>% head()
DC_census %>% class()
DC_census$id %>% class()
travel_times$dest_id %>% class()
travel_times <- travel_times %>%
mutate(origin_id = factor(origin_id),
dest_id = factor(dest_id))
left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id"))
travel_time_sf <_ left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id"))
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id"))
travel_times$dest_id %>% levels()
DC_census$id %>% levels()
DC_census <- st_read("data/washington_DC_censustracts.json") %>%
select("id" = MOVEMENT_ID, geometry) %>%
mutate(id = factor(id, levels = levels(travel_times$dest_id)))
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id"))
travel_time_sf %>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
theme_map
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id"))
travel_time_sf %>% View()
travel_time_sf %>% class()
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id")) %>%
st_as_sf()
travel_time_sf %>% class()
travel_time_sf %>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
theme_map
travel_time_sf %>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
theme_map %>%
scale_fill_viridis_c()
travel_time_sf %>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
theme_map +
scale_fill_viridis_c(direction = -1)
travel_time_sf %>% head()
travel_time_sf %>% View()
install.packages("censusr")
travel_time_sf %>% head()
travel_time_sf$dest_name
travel_time_sf$dest_name %>% head()
travel_time_sf$dest_name
str_remove(string = "4300 29th Street South, Shirlington, Arlington", pattern = ", [a-z],")
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id")) %>%
st_as_sf() %>%
st_transform(crs = "NAD83")
st_transform(x = travel_time_sf, crs = "NAD83")
DC_census <- st_read("data/washington_DC_censustracts.json") %>%
select("id" = MOVEMENT_ID, geometry) %>%
mutate(id = factor(id, levels = levels(travel_times$dest_id)))
install.packages("rgdal")
library(rgdal)
epsg <- make_EPSG()
epsg
idx <- grep("Washington D.C.", epsg$note, ignore.case=TRUE)
y
idx
idx <- grep("Washington", epsg$note, ignore.case=TRUE)
idx
idx <- grep("District of Columbia", epsg$note, ignore.case=TRUE)
idx
idx <- grep("D.C.", epsg$note, ignore.case=TRUE)
idx
epsg[idx[1:3], ]
idx <- grep("Washington", epsg$note, ignore.case=TRUE)
epsg[idx[1:3], ]
idx <- grep("Washington", epsg$note, ignore.case=TRUE)
epsg[idx[1:3], ]
st_transform(x = travel_time_sf, crs = 102285)
st_crs(x = travel_time_sf)
st_crs(x = travel_time_sf, proj4text = "+proj=lcc +lat_1=38.3 +lat_2=39.45 +lat_0=37.66666666666666 +lon_0=-77 +x_0=400000 +y_0=0 +ellps=GRS80 +units=m +no_defs ")
st_crs(x = travel_time_sf, proj4text = "+proj=lcc +lat_1=38.3 +lat_2=39.45 +lat_0=37.66666666666666 +lon_0=-77 +x_0=400000 +y_0=0 +ellps=GRS80 +units=m +no_defs ")
st_set_ crs(x = travel_time_sf, proj4text = "+proj=lcc +lat_1=38.3 +lat_2=39.45 +lat_0=37.66666666666666 +lon_0=-77 +x_0=400000 +y_0=0 +ellps=GRS80 +units=m +no_defs ")
st_set_crs(x = travel_time_sf, proj4text = "+proj=lcc +lat_1=38.3 +lat_2=39.45 +lat_0=37.66666666666666 +lon_0=-77 +x_0=400000 +y_0=0 +ellps=GRS80 +units=m +no_defs ")
st_set_crs(x = travel_time_sf, proj4text = "+proj=lcc +lat_1=38.3 +lat_2=39.45 +lat_0=37.66666666666666 +lon_0=-77 +x_0=400000 +y_0=0 +ellps=GRS80 +units=m +no_defs")
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id")) %>%
st_as_sf() %>%
st_transform(crs = 102285)
st_centroid(x = travel_time_sf)
library(tidyverse)
library(sf)
library(rgdal)
load("data/travel_times.RData")
theme_map <- theme_void()
travel_times <- travel_times %>%
mutate(origin_id = factor(origin_id),
dest_id = factor(dest_id))
travel_time_sf %>%
ggplot() +
geom_sf(mapping = aes(fill = mean_travel_time)) +
theme_map +
scale_fill_viridis_c(direction = -1)
travel_time_sf$dest_name
travel_time_sf$dest_name %>% unique()
travel_time_sf$dest_name %>% unique() %>% View()
travel_time_sf$dest_name %>% unique() %>% head()
DC_census <- st_read("data/washington_DC_censustracts.json") %>%
select("id" = MOVEMENT_ID, geometry) %>%
mutate(id = factor(id, levels = levels(travel_times$dest_id)))
travel_time_sf <- left_join(x = travel_times, y = DC_census, by = c("dest_id" = "id")) %>%
st_as_sf() %>%
st_transform(crs = 102285)
travel_time_sf$dest_name %>% unique() %>% head()
st_centroid(x = travel_time_sf)
